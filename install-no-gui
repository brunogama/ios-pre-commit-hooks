#!/bin/bash
set -e # Exit immediately if a command exits with a non-zero status.

# --- Configuration ---
# !!! IMPORTANT: Update this line with your actual GitHub username and repository name !!!
REPO_URL="https://github.com/brunogama/pre-commit-configs"
# You can change "main" to your default branch if it's different
BRANCH="main"
# --- End Configuration ---

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m'

ARCHIVE_URL="$REPO_URL/archive/refs/heads/$BRANCH.tar.gz"
TMP_DIR=$(mktemp -d)
CONFIG_FILE=".pre-commit-config.yaml"
SCRIPTS_DIR="scripts"

# Function to clean up the temporary directory on exit
cleanup() {
    echo "Cleaning up temporary directory: $TMP_DIR"
    rm -rf "$TMP_DIR"
}
trap cleanup EXIT

# Function to create scripts directory and copy script files
setup_scripts() {
    echo -e "${BLUE}Setting up script files...${NC}"
    
    # Create scripts directory if it doesn't exist
    mkdir -p "$SCRIPTS_DIR"
    
    # Copy script files from templates
    if [ -d "$TMP_DIR/scripts" ]; then
        echo -e "${BLUE}Copying script templates...${NC}"
        cp -f "$TMP_DIR/scripts/"*.sh "$SCRIPTS_DIR/" 2>/dev/null || true
        chmod +x "$SCRIPTS_DIR"/*.sh
        echo -e "${GREEN}Script files installed successfully!${NC}"
    else
        echo -e "${YELLOW}No script templates found in the repository.${NC}"
    fi
}

# Function to verify script dependencies
verify_dependencies() {
    local missing_deps=false
    
    # Check for required commands
    local commands=("grep" "find" "xargs" "git" "pre-commit")
    for cmd in "${commands[@]}"; do
        if ! command -v "$cmd" >/dev/null 2>&1; then
            echo -e "${RED}Missing required command: $cmd${NC}"
            missing_deps=true
        fi
    done
    
    # For iOS development specific tools
    if command -v xcode-select >/dev/null 2>&1; then
        if ! xcode-select -p >/dev/null 2>&1; then
            echo -e "${YELLOW}Warning: Xcode command line tools not installed${NC}"
            echo "Run: xcode-select --install"
            missing_deps=true
        fi
    else
        echo -e "${YELLOW}Warning: xcode-select not found${NC}"
        echo "This might be okay if you're not on macOS"
    fi
    
    if [ "$missing_deps" = true ]; then
        echo -e "${RED}Please install missing dependencies before continuing${NC}"
        exit 1
    fi
}

# Function to download and extract repository
setup_repository() {
    echo -e "${BLUE}Downloading repository...${NC}"
    if ! curl -sSL -o "$TMP_DIR/repo.tar.gz" "$ARCHIVE_URL"; then
        echo -e "${RED}Error: Failed to download repository from $ARCHIVE_URL${NC}" >&2
        exit 1
    fi
    
    echo -e "${BLUE}Extracting files...${NC}"
    if ! tar -xzf "$TMP_DIR/repo.tar.gz" -C "$TMP_DIR" --strip-components=1; then
        echo -e "${RED}Error: Failed to extract repository archive${NC}" >&2
        exit 1
    fi
}

# Function to install selected hook types
install_hook_types() {
    local hook_types=("pre-commit" "pre-push" "commit-msg")
    
    for hook_type in "${hook_types[@]}"; do
        echo -e "\n${BLUE}Do you want to install ${hook_type} hooks? (y/n)${NC}"
        read -r INSTALL_HOOK_TYPE
        if [[ "$INSTALL_HOOK_TYPE" =~ ^[Yy]$ ]]; then
            echo -e "${BLUE}Installing ${hook_type} hooks...${NC}"
            pre-commit install -t "$hook_type"
            echo -e "${GREEN}${hook_type} hooks installed successfully!${NC}"
        fi
    done
}

# Main installation process
main() {
    echo -e "${BLUE}Welcome to the Pre-commit Hooks Installer!${NC}"
    echo -e "This will set up pre-commit hooks and necessary scripts for your project.\n"
    
    # Verify dependencies
    verify_dependencies
    
    # Download and extract repository
    setup_repository
    
    # Setup base configuration
    if [ ! -f "$CONFIG_FILE" ]; then
        echo -e "\n${BLUE}Create new .pre-commit-config.yaml file? (y/n)${NC}"
        read -r CREATE_CONFIG
        if [[ "$CREATE_CONFIG" =~ ^[Yy]$ ]]; then
            cat > "$CONFIG_FILE" << 'EOF'
# Default configurations
default_stages: [pre-commit]
default_install_hook_types: [pre-commit, pre-push, commit-msg]
default_language_version:
  python: python3

repos:
EOF
            echo -e "${GREEN}Configuration file created successfully!${NC}"
        fi
    fi
    
    # Setup scripts
    echo -e "\n${BLUE}Install script files for hooks? (y/n)${NC}"
    read -r INSTALL_SCRIPTS
    if [[ "$INSTALL_SCRIPTS" =~ ^[Yy]$ ]]; then
        setup_scripts
    fi
    
    # Install hooks
    echo -e "\n${BLUE}Installing pre-commit hooks...${NC}"
    pre-commit clean || true
    pre-commit uninstall || true
    install_hook_types
    
    # Final message
    echo -e "\n${GREEN}Installation completed successfully!${NC}"
    echo -e "${BLUE}To verify the installation, run:${NC}"
    echo -e "${YELLOW}pre-commit run --all-files${NC}"
    
    if [ -d "$SCRIPTS_DIR" ]; then
        echo -e "\n${BLUE}Script files are installed in: ${YELLOW}$SCRIPTS_DIR/${NC}"
        echo -e "Make sure these files are committed to your repository"
    fi
}

# Start the installation
main
exit 0 