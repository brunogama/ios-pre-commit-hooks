#!/bin/bash

# Exit on error
set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function for confirming actions
confirm_action() {
    local message=$1
    echo
    echo -e "${BLUE}‚ö†Ô∏è $message${NC}"
    read -p "Do you want to proceed? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]
    then
        echo "Skipping this step..."
        return 1
    fi
    return 0
}

# Function to setup git alias for tag deletion
setup_tag_deletion_alias() {
    echo -e "${BLUE}Setting up git aliases for tag deletion...${NC}"

    # Alias for remote tags deletion
    git config --global alias.delete-remote-tags '!git tag -l | xargs -r git push --delete origin'

    # Alias for local tags deletion
    git config --global alias.delete-local-tags '!git tag -l | xargs -r git tag -d'

    # Combined alias for both operations
    git config --global alias.delete-all-tags '!git delete-remote-tags && git delete-local-tags'

    echo -e "${GREEN}Created aliases:${NC}"
    echo "  git delete-remote-tags  - Deletes all tags from remote"
    echo "  git delete-local-tags   - Deletes all local tags"
    echo "  git delete-all-tags     - Deletes both remote and local tags"
}

# Function to delete all tags (local and remote)
delete_all_tags() {
    echo -e "${BLUE}Fetching all tags...${NC}"
    git fetch --tags

    echo -e "${BLUE}Listing all tags (local and remote)...${NC}"
    git tag -l

    if confirm_action "Delete ALL tags (local and remote)?"; then
        # Delete all remote tags first
        echo -e "${BLUE}Removing all remote tags...${NC}"
        git delete-remote-tags

        # Delete all local tags
        echo -e "${BLUE}Removing all local tags...${NC}"
        git delete-local-tags

        echo -e "${GREEN}All tags have been deleted${NC}"
    fi
}

echo -e "${BLUE}üîÑ Interactive Git History Reset Script${NC}"
echo "====================================="

# Initial warning
if ! confirm_action "WARNING: This script will completely reset git history and remove ALL tags! This action cannot be undone. Make sure you have necessary backups."; then
    echo -e "${RED}Operation cancelled.${NC}"
    exit 1
fi

# Setup git aliases first
if confirm_action "Setup git aliases for tag deletion?"; then
    setup_tag_deletion_alias
fi

# Delete all tags first
if confirm_action "Delete all existing tags before proceeding?"; then
    delete_all_tags
fi

# Store current branch name
current_branch=$(git symbolic-ref --short HEAD)
echo -e "${BLUE}Current branch: $current_branch${NC}"

# Create new orphan branch
if confirm_action "Create new orphan branch?"; then
    echo -e "${BLUE}Creating new orphan branch...${NC}"
    git checkout --orphan new_main
fi

# Stage all files
if confirm_action "Add all files to staging?"; then
    echo -e "${BLUE}Adding all files...${NC}"
    git add -A
    git status
fi

# Create initial commit
if confirm_action "Create initial commit?"; then
    echo -e "${BLUE}Creating initial commit...${NC}"
    read -p "Enter commit message (default: 'Initial commit: Reset to version 1.0.0'): " commit_msg
    commit_msg=${commit_msg:-"feat: Initial commit: Reset to version 1.0.0"}
    git commit -m "$commit_msg"
fi

# Delete all local branches except the new one
if confirm_action "Remove all old local branches?"; then
    echo -e "${BLUE}Removing old branches...${NC}"
    git branch | grep -v "new_main" | while read branch; do
        if confirm_action "Delete branch '$branch'?"; then
            git branch -D "$branch"
        fi
    done
fi

# Rename new_main to main
if confirm_action "Rename new_main branch to main?"; then
    echo -e "${BLUE}Renaming branch to main...${NC}"
    git branch -m main
fi

# Force push changes
if confirm_action "Force push all changes to remote? This will overwrite remote history!"; then
    echo -e "${BLUE}Force pushing changes...${NC}"
    git push -f origin main
fi

# Verify all tags are gone and create new 1.0.0 tag
if confirm_action "Create new version 1.0.0 tag?"; then
    # Double check no tags exist
    if [ -n "$(git tag -l)" ]; then
        echo -e "${RED}WARNING: Some tags still exist. Cleaning up...${NC}"
        delete_all_tags
    fi

    echo -e "${BLUE}Creating version 1.0.0 tag...${NC}"
    read -p "Enter tag message (default: 'Version 1.0.0'): " tag_msg
    tag_msg=${tag_msg:-"Version 1.0.0"}
    git tag -a "1.0.0" -m "$tag_msg"

    if confirm_action "Push new 1.0.0 tag to remote?"; then
        git push origin 1.0.0
    fi
fi

echo -e "\n${GREEN}‚úÖ Repository reset process completed!${NC}"
echo
echo "Instructions for other team members:"
echo "1. git fetch --all"
echo "2. git checkout main"
echo "3. git reset --hard origin/main"
echo "4. git pull"
echo "5. git fetch --tags -f  # To sync tags"
echo
echo -e "${BLUE}New git aliases available:${NC}"
echo "- git delete-remote-tags  : Delete all remote tags"
echo "- git delete-local-tags   : Delete all local tags"
echo "- git delete-all-tags     : Delete both remote and local tags"
